#Copyright [2015] Zalando SE
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "changeme"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Local postgres
slick.dbs.default.driver="slick.driver.PostgresDriver$"
slick.dbs.default.driver="org.postgresql.Driver"
slick.dbs.default.url="jdbc:postgresql://localhost:5432/translation_service_db"
slick.dbs.default.user="postgres"
slick.dbs.default.password = "postgres"
slick.dbs.default.numThreads = 10
slick.dbs.default.queueSize = 100
slick.dbs.default.schemas="ts_data"
slick.dbs.default.connectionPool = HikariCP
slick.dbs.default.connectionTimeout = 20000
slick.dbs.default.maxConnections = 40

# Local postgres
postgresDb = {
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  properties = {
    databaseName = "translation_service_db"

    user = "postgres"
    user=${?DB_USER}
    password = "postgres"
    password = ${?DB_PASSWORD}
    url="jdbc:postgresql://localhost:5432/translation_service_db"
    url=${?DB_URL}
  }
  numThreads = 10
  queueSize = 100
  schemas="ts_data"
  connectionTimeout = 20000
  maxConnections = 40
  idleTimeout=10000
}

#force etag use
http.useETag=true
http.cacheControl=3600
play.http.filters = "filters.Filters"

# determines if the OAUTH2 mechanism should be enabled (e.g. for testing)
oauth2.enabled = true

# callback to which the user is redirected by the authentication server
oauth2.callback.url = "https://localhost:9443/oauth-callback"
oauth2.callback.url = ${?CALLBACK_URL}

# access token endpoint
oauth2.access.token.url = "https://test/oauth2/test-authorize"

# authorization server endpoint
oauth2.authorization.url = "https://test/oauth2/test-authorize"
# token info endpoint
oauth2.token.info.url = "https://test/oauth2/test-authorize"

# token info endpoint
oauth2.access.token.url =${?TOKEN_ENDPOINT_EMPLOYEE_URL}
oauth2.authorization.url = ${?AUTHORIZATION_EMPLOYEE_URL}
oauth2.token.info.url = ${?TOKEN_ENDPOINT_TOKEN_INFO_URL}

# file containing the OAUTH2 credentials
oauth2.credentials.filePath= "/Users/ychahbi/divfinal/logs/client.json"
oauth2.credentials.filePath= ${?CREDENTIALS_FILE_PATH}

# timout in ms for the requests against OAUTH infrastructure
oauth2.request.timeout = 5000

# specifies the expiry time boundary in seconds after which the OAUTH2 mechanism should try to reresh the access token
oauth2.token.refresh.expiry.limit = 300

# time in seconds after which the credentials cache should expire automatically
oauth2.credentials.cache.expiry.time = 300

# additional server paths excluded from the OAUTH2 validation
oauth2.excluded.paths = ["/webjars", "/assets"]

# additional service paths for OAUTH2 validation
oauth2.service.paths = ["/services"]
application.global=controllers.Global
play.modules.enabled += "modules.CustomModule"
play.crypto.secret="corleone"
play.crypto.secret=${?APPLICATION_SECRET}



